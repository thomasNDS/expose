/*! LGMaps v3.0.0, 2017-06-16 */

! function(t) {
    function o() {
        var t = (new Date).getTime();
        return "undefined" != typeof performance && "function" == typeof performance.now && (t += performance.now()), "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(o) {
            var i = (t + 16 * Math.random()) % 16 | 0;
            return t = Math.floor(t / 16), ("x" === o ? i : 3 & i | 8).toString(16)
        })
    }
    window.LGMaps = window.LGMaps || {
        maps: {}
    }, window.mobileAndTabletcheck = function() {
        var t = !1;
        return function(o) {
            (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(o) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(o.substr(0, 4))) && (t = !0)
        }(navigator.userAgent || navigator.vendor || window.opera), t
    };
    var i = window.mobileAndTabletcheck(),
        e = "ontouchstart" in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
    Raphael.el.trigger = function(t) {
        for (var o = 0, i = this.events.length; o < i; o++) this.events[o].name == t && this.events[o].f.call(this)
    }, t.fn.LGMap = function(a) {
        var n = t.extend({
            responsive: !0,
            offColor: "#ccc",
            strokeColor: "#24221f",
            offStrokeColor: "#444",
            strokeWidth: 1,
            abbreviationColor: "#f2f2f2",
            abbreviationFontSize: 12,
            displayAbbreviations: !0,
            displayAbbreviationOnDisabledStates: !1,
            useText: !0,
            useTextAtBottom: !1,
            hrefTarget: "_blank",
            textAreaWidth: 300,
            textAreaHeight: 300,
            pinSize: 10,
            displayMousePosition: !1,
            enablePanZoom: !1,
            onReady: function() {},
            onStateClick: function() {}
        }, a);
        if (!n.map) throw new Error("LGMap plugin was called without a map property");
        var r, s, l = t(this),
            c = 0,
            p = 0,
            d = null,
            m = !1,
            f = t(window),
            h = f.width(),
            u = 0,
            v = !1,
            g = [],
            x = l.parent().width(),
            w = t('<div class="lg-map"></div>').appendTo(l),
            b = "lg-map-" + o();
        w.attr("id", b);
        var k, y = urlMap + "/maps/" + n.map + ".js";

        t.getScript(y, function(o) {
            function a() {
                x = l.parent().width(), h = f.width(), F.useText ? (s = !(h >= 767) || F.useTextAtBottom) ? (H = (j = x) / X, l.css({
                    width: j + "px",
                    height: H + k.height() + "px"
                }), k.css({
                    width: j + "px",
                    marginTop: H + "px",
                    height: "auto"
                })) : (j = x - F.textAreaWidth, H = j / X, l.css({
                    width: h >= 767 ? j + F.textAreaWidth + "px" : j + "px",
                    height: H + "px"
                }), k.css({
                    width: h >= 767 ? F.textAreaWidth + "px" : j + "px",
                    height: h >= 767 ? H + "px" : F.textAreaHeight,
                    display: "inline",
                    float: h >= 767 ? "right" : "none",
                    marginTop: h >= 767 ? 0 : H + "px"
                })) : (H = (j = x) / X, l.css({
                    width: j + "px",
                    height: H + "px"
                })), r.changeSize(j, H, !0, !1)
            }

            function y(o) {
                e && i || (T(), w.after(t("<div />").addClass("tooltip")), t(".tooltip").html(o), P(), t(".tooltip").css({
                    left: c - 50,
                    top: p + u
                }).fadeIn())
            }

            function P() {
                u = -70, v = p - t(".tooltip").height() + u < 0, u = v ? 30 : u
            }

            function T() {
                w.next(".tooltip").remove()
            }

            function z(o) {
                i = t(window).scrollTop();
                if (o && o.pageX ? (c = o.pageX, p = o.pageY - i) : (c = event.clientX + document.body.scrollLeft, p = event.clientY + document.body.scrollTop), c < 0 && (c = 0), p < 0 && (p = 0), P(), w.next(".tooltip").css({
                        left: c - 50,
                        top: p + u
                    }), F.displayMousePosition) {
                    var i = f.scrollTop(),
                        e = l.offset(),
                        a = Math.round(c - e.left),
                        n = Math.round(p - e.top + i);
                    t(".mouse-position .xPos").text("X: " + a), t(".mouse-position .yPos").text("Y: " + n)
                }
            }

            function C() {
                E.x = Z[0], E.y = Z[1], E.width = Z[2], E.height = Z[3]
            }

            function A(t, o, i, e) {
                E.x = t, E.y = o, E.width = i, E.height = e, J = !0
            }

            function S() {
                O.dx = Z[0], O.dy = Z[1], Q = !0
            }

            function M(t, o) {
                O.dx = Z[0] - t / I, O.dy = Z[1] - o / I;
                var i = _ - Z[3],
                    e = R - Z[2];
                O.dx >= e && (O.dx = e), O.dx <= 0 && (O.dx = 0), O.dy >= i && (O.dy = i), O.dy <= 0 && (O.dy = 0), r.setViewBox(O.dx, O.dy, Z[2], Z[3], !1)
            }

            function W() {
                Q = !1, Z[0] = O.dx, Z[1] = O.dy
            }

            function B(t) {
                Y = 1, Z[0] = 0, Z[1] = 0, Z[2] = R, Z[3] = _, E.x = 0, E.y = 0, E.width = R, E.height = _, t.animateViewBox(E, Z[0], Z[1], Z[2], Z[3], 250, A), J = !0
            }
            var D = window.LGMaps.maps[n.map],
                F = t.extend(n, D.config),
                L = D.paths,
                V = D.pins,
                j = F.mapWidth,
                H = F.mapHeight,
                X = j / H;
            if (F.enablePanZoom) var q = t('<div class="lg-map-console"><ul><li class="lg-map-zoom-in"></li><li class="lg-map-zoom-out"></li><li class="lg-map-move-up"></li><li class="lg-map-move-down"></li><li class="lg-map-move-left"></li><li class="lg-map-move-right"></li><li class="lg-map-zoom-reset"></li></ul></div>').appendTo(l);
            var G, Y = 1,
                R = j,
                _ = H,
                Z = [0, 0, R, _],
                I = 1,
                N = !1,
                O = (t(window), {}),
                E = {},
                Q = !1,
                J = !0;
            F.displayMousePosition && (t('<div class="mouse-position"><div class="xPos">X: 0</div><div class="yPos">Y: 0</div></div>').appendTo(l), t("body").css("cursor", "crosshair")), F.useText && (k = t('<div class="lg-map-text"></div>').appendTo(l)).html(F.defaultText), l.mousemove(function(t) {
                    z(t)
                }),
                function() {
                    r = new ScaleRaphael(b, F.mapWidth, F.mapHeight), new Array;
                    var o = [],
                        i = {},
                        e = {
                            "stroke-width": F.strokeWidth || 1
                        },
                        s = 0;
                    for (var l in L) {
                        var c = L[l].name.split("-").join("").toLowerCase();
                        i[c] = r.set();
                        var p = i[c];
                        e = L[s].enable ? t.extend(e, {
                            fill: L[s].color,
                            stroke: F.strokeColor,
                            id: s
                        }) : t.extend(e, {
                            fill: F.offColor,
                            stroke: F.offStrokeColor
                        }), p.push(r.path(L[l].path).attr(e)), (L[s].enable && F.displayAbbreviations || !L[s].enable && F.displayAbbreviationOnDisabledStates) && p.push(r.text(L[l].textX, L[l].textY, L[l].abbreviation).attr({
                            "font-family": "Arial, sans-serif",
                            "font-weight": "bold",
                            "font-size": F.abbreviationFontSize,
                            fill: F.abbreviationColor,
                            "z-index": 1e3
                        })), L[s].enable || p.toFront(), p[0].node.id = s, p[1] && p[1].toFront(), o.push(p[0]);
                        var f = r.path(L[l].path).attr({
                            fill: "#f00",
                            "stroke-width": 0,
                            opacity: 0,
                            cursor: L[s].enable ? F.displayMousePosition ? "crosshair" : "pointer" : "default"
                        });
                        f.node.id = s, f.node.setAttribute("lg-map-name", L[l].name), g.push(f), f.mouseover(function(i) {
                            i.stopPropagation();
                            var e = t(this.node).attr("id");
                            L[e].enable && (o[e] != d && o[e].animate({
                                fill: L[e].hoverColor
                            }, 500), y(L[e].name))
                        }), f.mouseout(function(i) {
                            var e = t(this.node).attr("id");
                            L[e].enable && (o[e] != d && o[e].animate({
                                fill: L[e].color
                            }, 500), T())
                        }), f.click(function(i) {
                            var e = t(this.node).attr("id");
                            if (L[e].enable) {
                                var a = k[0];
                                if (a.scrollLeft = 0, a.scrollTop = 0, d) {
                                    var r = t(d.node).attr("id");
                                    d.animate({
                                        fill: m ? V[r].color : L[r].color
                                    }, 500)
                                }
                                m = !1, o[e].animate({
                                    fill: L[e].selectedColor
                                }, 500), d = o[e], F.useText ? k.html(L[e].text) : window.open(L[e].url, F.hrefTarget)
                            }
                            t.isFunction(n.onStateClick) && n.onStateClick.call(this, L[e])
                        }), s++
                    }
                    F.displayMousePosition || (a(), F.responsive && t(window).resize(function() {
                        a()
                    }))
                }(),
                function() {
                    for (var o = 0; o < V.length; o++) {
                        var i, e = {
                            cursor: "pointer",
                            fill: V[o].color,
                            stroke: F.strokeColor,
                            id: o
                        };
                        if (V[o].src && "" !== V[o].src) {
                            var a = V[o].pinWidth / V[o].srcWidth;
                            i = r.image(V[o].src, 0, 0, V[o].srcWidth, V[o].srcHeight).attr(e);
                            var s = -V[o].srcWidth / 2 + V[o].xPos,
                                l = -V[o].srcHeight / 2 + V[o].yPos;
                            i.animate({
                                transform: "T" + s + "," + l + " S" + a
                            }, 0)
                        } else i = r.circle(V[o].xPos, V[o].yPos, V[o].pinWidth || F.pinSize).attr(e);
                        i.node.id = o, i.node.setAttribute("lg-map-name", V[o].name), g.push(i), i.mouseover(function(o) {
                            o.stopPropagation();
                            var i = t(this.node).attr("id");
                            this != d && this.animate({
                                fill: V[i].hoverColor
                            }, 500), y(V[i].name)
                        }), i.mouseout(function(o) {
                            var i = t(this.node).attr("id");
                            this != d && this.animate({
                                fill: V[i].color
                            }, 500), T()
                        }), i.click(function(o) {
                            var i = t(this.node).attr("id"),
                                e = k[0];
                            if (e.scrollLeft = 0, e.scrollTop = 0, d) {
                                var a = t(d.node).attr("id");
                                d.animate({
                                    fill: m ? V[a].color : L[a].color
                                }, 500)
                            }
                            m = !0, this.animate({
                                fill: V[i].selectedColor
                            }, 500), d = this, 1 == F.useText ? k.html(V[i].text) : window.open(V[i].url, F.hrefTarget), t.isFunction(n.onStateClick) && n.onStateClick.call(this, V[i])
                        })
                    }
                }(), F.enablePanZoom && function() {
                    (G = r.rect(Z[0], Z[1], Z[2], Z[3]).attr({
                        fill: "#F00",
                        "fill-opacity": 0,
                        stroke: "none"
                    }).data({
                        disabled: !1,
                        name: "_backpan"
                    }).toBack()).drag(M, S, W), t("body").on({
                        mousewheel: function(o) {
                            t(o.target).parents(".lg-map").length && (o.preventDefault(), o.stopPropagation())
                        }
                    }), w.bind("mousewheel.map", function(t, o, i, e) {
                        if (J) {
                            if (J = !1, (Y += o / 2) <= 1 && (Y = 1), 1 == Y && B(r), 1 == Y && o < 0) return;
                            C();
                            var a = Z[2],
                                n = Z[3];
                            return Z[2] = R / Y, Z[3] = _ / Y, Z[0] += (a - Z[2]) / 2, Z[1] += (n - Z[3]) / 2, r.animateViewBox(E, Z[0], Z[1], Z[2], Z[3], 250, A), I = R / Z[2], I = I.toFixed(1), !1
                        }
                    }), w.mousemove(function(o) {
                        N || 1 == Y ? t(this).css("cursor", "default") : t(this).css("cursor", "move")
                    }), q.find(".lg-map-zoom-in").click(function(t) {
                        if (J) {
                            J = !1, Y += .5, C();
                            var o = Z[2],
                                i = Z[3];
                            Z[2] = R / Y, Z[3] = _ / Y, Z[0] += (o - Z[2]) / 2, Z[1] += (i - Z[3]) / 2, r.animateViewBox(E, Z[0], Z[1], Z[2], Z[3], 250, A), I = R / Z[2], I = I.toFixed(1), t.stopPropagation(), t.preventDefault()
                        }
                    }), q.find(".lg-map-zoom-out").click(function(t) {
                        if (J) {
                            if (J = !1, 1 == Y) return void B(r);
                            Y -= .5, C();
                            var o = Z[2],
                                i = Z[3];
                            Z[2] = R / Y, Z[3] = _ / Y, Z[0] += (o - Z[2]) / 2, Z[1] += (i - Z[3]) / 2, r.animateViewBox(E, Z[0], Z[1], Z[2], Z[3], 250, A), I = R / Z[2], I = I.toFixed(1), t.stopPropagation(), t.preventDefault()
                        }
                    }), q.find(".lg-map-zoom-reset").click(function(t) {
                        B(r), t.stopPropagation(), t.preventDefault()
                    }), q.find(".lg-map-move-up").click(function(t) {
                        Z[1] -= 20, Z[1] <= 0 && (Z[1] = 0), r.setViewBox(Z[0], Z[1], Z[2], Z[3], !1), t.stopPropagation(), t.preventDefault()
                    }), q.find(".lg-map-move-down").click(function(t) {
                        Z[1] += 20;
                        var o = _ - Z[3];
                        Z[1] >= o && (Z[1] = o), r.setViewBox(Z[0], Z[1], Z[2], Z[3], !1), t.stopPropagation(), t.preventDefault()
                    }), q.find(".lg-map-move-left").click(function(t) {
                        Z[0] -= 20, Z[0] <= 0 && (Z[0] = 0), r.setViewBox(Z[0], Z[1], Z[2], Z[3], !1), t.stopPropagation(), t.preventDefault()
                    }), q.find(".lg-map-move-right").click(function(t) {
                        Z[0] += 20;
                        var o = R - Z[2];
                        Z[0] >= o && (Z[0] = o), r.setViewBox(Z[0], Z[1], Z[2], Z[3], !1), t.stopPropagation(), t.preventDefault()
                    }), q.fadeIn()
                }(), l.on("stateClick", function(o, i) {
                    t.each(g, function(t, o) {
                        pathName = o.node.getAttribute("lg-map-name"), i === pathName && g[t].trigger("click")
                    })
                }), n.onReady.call(this)
        })
    }
}(jQuery);
